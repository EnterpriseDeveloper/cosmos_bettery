// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: publicevents/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # proto/tx/message
type MsgCreateValidPubEvents struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PubId   uint64 `protobuf:"varint,2,opt,name=pubId,proto3" json:"pubId,omitempty"`
	Answers string `protobuf:"bytes,3,opt,name=answers,proto3" json:"answers,omitempty"`
	Reput   int64  `protobuf:"varint,4,opt,name=reput,proto3" json:"reput,omitempty"`
}

func (m *MsgCreateValidPubEvents) Reset()         { *m = MsgCreateValidPubEvents{} }
func (m *MsgCreateValidPubEvents) String() string { return proto.CompactTextString(m) }
func (*MsgCreateValidPubEvents) ProtoMessage()    {}
func (*MsgCreateValidPubEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec5dc76a403d6247, []int{0}
}
func (m *MsgCreateValidPubEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateValidPubEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateValidPubEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateValidPubEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateValidPubEvents.Merge(m, src)
}
func (m *MsgCreateValidPubEvents) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateValidPubEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateValidPubEvents.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateValidPubEvents proto.InternalMessageInfo

func (m *MsgCreateValidPubEvents) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateValidPubEvents) GetPubId() uint64 {
	if m != nil {
		return m.PubId
	}
	return 0
}

func (m *MsgCreateValidPubEvents) GetAnswers() string {
	if m != nil {
		return m.Answers
	}
	return ""
}

func (m *MsgCreateValidPubEvents) GetReput() int64 {
	if m != nil {
		return m.Reput
	}
	return 0
}

type MsgCreateValidPubEventsResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateValidPubEventsResponse) Reset()         { *m = MsgCreateValidPubEventsResponse{} }
func (m *MsgCreateValidPubEventsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateValidPubEventsResponse) ProtoMessage()    {}
func (*MsgCreateValidPubEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec5dc76a403d6247, []int{1}
}
func (m *MsgCreateValidPubEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateValidPubEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateValidPubEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateValidPubEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateValidPubEventsResponse.Merge(m, src)
}
func (m *MsgCreateValidPubEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateValidPubEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateValidPubEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateValidPubEventsResponse proto.InternalMessageInfo

func (m *MsgCreateValidPubEventsResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgCreatePartPubEvents struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PubId   uint64 `protobuf:"varint,2,opt,name=pubId,proto3" json:"pubId,omitempty"`
	Answers string `protobuf:"bytes,3,opt,name=answers,proto3" json:"answers,omitempty"`
	Amount  int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgCreatePartPubEvents) Reset()         { *m = MsgCreatePartPubEvents{} }
func (m *MsgCreatePartPubEvents) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePartPubEvents) ProtoMessage()    {}
func (*MsgCreatePartPubEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec5dc76a403d6247, []int{2}
}
func (m *MsgCreatePartPubEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePartPubEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePartPubEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePartPubEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePartPubEvents.Merge(m, src)
}
func (m *MsgCreatePartPubEvents) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePartPubEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePartPubEvents.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePartPubEvents proto.InternalMessageInfo

func (m *MsgCreatePartPubEvents) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreatePartPubEvents) GetPubId() uint64 {
	if m != nil {
		return m.PubId
	}
	return 0
}

func (m *MsgCreatePartPubEvents) GetAnswers() string {
	if m != nil {
		return m.Answers
	}
	return ""
}

func (m *MsgCreatePartPubEvents) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type MsgCreatePartPubEventsResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreatePartPubEventsResponse) Reset()         { *m = MsgCreatePartPubEventsResponse{} }
func (m *MsgCreatePartPubEventsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePartPubEventsResponse) ProtoMessage()    {}
func (*MsgCreatePartPubEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec5dc76a403d6247, []int{3}
}
func (m *MsgCreatePartPubEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePartPubEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePartPubEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePartPubEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePartPubEventsResponse.Merge(m, src)
}
func (m *MsgCreatePartPubEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePartPubEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePartPubEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePartPubEventsResponse proto.InternalMessageInfo

func (m *MsgCreatePartPubEventsResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgCreateCreatePubEvents struct {
	Creator      string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PubId        uint64   `protobuf:"varint,2,opt,name=pubId,proto3" json:"pubId,omitempty"`
	Question     string   `protobuf:"bytes,3,opt,name=question,proto3" json:"question,omitempty"`
	Answers      []string `protobuf:"bytes,4,rep,name=answers,proto3" json:"answers,omitempty"`
	PremAmount   int64    `protobuf:"varint,5,opt,name=premAmount,proto3" json:"premAmount,omitempty"`
	StartTime    int64    `protobuf:"varint,6,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime      int64    `protobuf:"varint,7,opt,name=endTime,proto3" json:"endTime,omitempty"`
	ExpertAmount int64    `protobuf:"varint,8,opt,name=expertAmount,proto3" json:"expertAmount,omitempty"`
	Advisor      string   `protobuf:"bytes,9,opt,name=advisor,proto3" json:"advisor,omitempty"`
}

func (m *MsgCreateCreatePubEvents) Reset()         { *m = MsgCreateCreatePubEvents{} }
func (m *MsgCreateCreatePubEvents) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCreatePubEvents) ProtoMessage()    {}
func (*MsgCreateCreatePubEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec5dc76a403d6247, []int{4}
}
func (m *MsgCreateCreatePubEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCreatePubEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCreatePubEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCreatePubEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCreatePubEvents.Merge(m, src)
}
func (m *MsgCreateCreatePubEvents) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCreatePubEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCreatePubEvents.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCreatePubEvents proto.InternalMessageInfo

func (m *MsgCreateCreatePubEvents) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateCreatePubEvents) GetPubId() uint64 {
	if m != nil {
		return m.PubId
	}
	return 0
}

func (m *MsgCreateCreatePubEvents) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

func (m *MsgCreateCreatePubEvents) GetAnswers() []string {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (m *MsgCreateCreatePubEvents) GetPremAmount() int64 {
	if m != nil {
		return m.PremAmount
	}
	return 0
}

func (m *MsgCreateCreatePubEvents) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *MsgCreateCreatePubEvents) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *MsgCreateCreatePubEvents) GetExpertAmount() int64 {
	if m != nil {
		return m.ExpertAmount
	}
	return 0
}

func (m *MsgCreateCreatePubEvents) GetAdvisor() string {
	if m != nil {
		return m.Advisor
	}
	return ""
}

type MsgCreateCreatePubEventsResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateCreatePubEventsResponse) Reset()         { *m = MsgCreateCreatePubEventsResponse{} }
func (m *MsgCreateCreatePubEventsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCreatePubEventsResponse) ProtoMessage()    {}
func (*MsgCreateCreatePubEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ec5dc76a403d6247, []int{5}
}
func (m *MsgCreateCreatePubEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCreatePubEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCreatePubEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCreatePubEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCreatePubEventsResponse.Merge(m, src)
}
func (m *MsgCreateCreatePubEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCreatePubEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCreatePubEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCreatePubEventsResponse proto.InternalMessageInfo

func (m *MsgCreateCreatePubEventsResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgCreateValidPubEvents)(nil), "VoroshilovMax.bettery.publicevents.MsgCreateValidPubEvents")
	proto.RegisterType((*MsgCreateValidPubEventsResponse)(nil), "VoroshilovMax.bettery.publicevents.MsgCreateValidPubEventsResponse")
	proto.RegisterType((*MsgCreatePartPubEvents)(nil), "VoroshilovMax.bettery.publicevents.MsgCreatePartPubEvents")
	proto.RegisterType((*MsgCreatePartPubEventsResponse)(nil), "VoroshilovMax.bettery.publicevents.MsgCreatePartPubEventsResponse")
	proto.RegisterType((*MsgCreateCreatePubEvents)(nil), "VoroshilovMax.bettery.publicevents.MsgCreateCreatePubEvents")
	proto.RegisterType((*MsgCreateCreatePubEventsResponse)(nil), "VoroshilovMax.bettery.publicevents.MsgCreateCreatePubEventsResponse")
}

func init() { proto.RegisterFile("publicevents/tx.proto", fileDescriptor_ec5dc76a403d6247) }

var fileDescriptor_ec5dc76a403d6247 = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0xc6, 0x69, 0xda, 0x8c, 0x10, 0x07, 0xd3, 0x16, 0xcb, 0x42, 0xc6, 0x32, 0x1c, 0x72,
	0xb2, 0xa1, 0x88, 0x0b, 0x70, 0xa1, 0x85, 0x03, 0x87, 0x88, 0xca, 0x42, 0x3d, 0x70, 0xa9, 0xec,
	0x78, 0x94, 0xae, 0x94, 0x78, 0x97, 0xdd, 0x75, 0x48, 0xf8, 0x0a, 0x2e, 0x20, 0x24, 0x7e, 0x88,
	0x63, 0x4f, 0x88, 0x23, 0x4a, 0x7e, 0x04, 0x65, 0xed, 0x98, 0x98, 0xda, 0x42, 0x6d, 0xd5, 0xe3,
	0x9b, 0x79, 0x6f, 0xde, 0x9b, 0xd5, 0xd8, 0xb0, 0xc7, 0xb3, 0x78, 0x4c, 0x87, 0x38, 0xc5, 0x54,
	0xc9, 0x40, 0xcd, 0x7c, 0x2e, 0x98, 0x62, 0xa6, 0x77, 0xc2, 0x04, 0x93, 0x67, 0x74, 0xcc, 0xa6,
	0x83, 0x68, 0xe6, 0xc7, 0xa8, 0x14, 0x8a, 0xb9, 0xbf, 0x49, 0xb6, 0x1f, 0x54, 0xa4, 0xd3, 0x68,
	0x4c, 0x93, 0x53, 0x9e, 0xc5, 0xa7, 0x79, 0x21, 0x1f, 0x64, 0x7b, 0x15, 0x12, 0x8f, 0x84, 0xba,
	0xc8, 0x79, 0x58, 0xe1, 0x0c, 0x05, 0x46, 0x0a, 0x2f, 0xb0, 0xbc, 0x39, 0xdc, 0x1d, 0xc8, 0xd1,
	0x91, 0xee, 0x9e, 0xac, 0xcc, 0x8e, 0xb3, 0xf8, 0xb5, 0x26, 0x98, 0x16, 0x6c, 0x6b, 0x15, 0x13,
	0x16, 0x71, 0x49, 0xbf, 0x17, 0xae, 0xa1, 0xb9, 0x0b, 0x5b, 0x3c, 0x8b, 0xdf, 0x24, 0x56, 0xdb,
	0x25, 0xfd, 0x4e, 0x98, 0x83, 0x15, 0x3f, 0x4a, 0xe5, 0x47, 0x14, 0xd2, 0x32, 0x72, 0x7e, 0x01,
	0x57, 0x7c, 0x81, 0x3c, 0x53, 0x56, 0xc7, 0x25, 0x7d, 0x23, 0xcc, 0x81, 0xf7, 0x18, 0xee, 0x37,
	0x58, 0x87, 0x28, 0x39, 0x4b, 0x25, 0x9a, 0xb7, 0xa1, 0x4d, 0x13, 0xed, 0xde, 0x09, 0xdb, 0x34,
	0xf1, 0x3e, 0xc1, 0x7e, 0x29, 0x39, 0x8e, 0x84, 0xba, 0x89, 0xb0, 0xfb, 0xd0, 0x8d, 0x26, 0x2c,
	0x4b, 0xd7, 0x69, 0x0b, 0xe4, 0x3d, 0x02, 0xa7, 0xde, 0xbb, 0x31, 0xed, 0xd7, 0x36, 0x58, 0xa5,
	0xa4, 0x10, 0x5e, 0x39, 0xb0, 0x0d, 0x3b, 0x1f, 0x32, 0x94, 0x8a, 0xb2, 0xb4, 0x48, 0x5c, 0xe2,
	0xcd, 0x65, 0x3a, 0xae, 0xb1, 0xb9, 0x8c, 0x03, 0xc0, 0x05, 0x4e, 0x5e, 0xe6, 0x0b, 0x6d, 0xe9,
	0x85, 0x36, 0x2a, 0xe6, 0x3d, 0xe8, 0x49, 0x15, 0x09, 0xf5, 0x8e, 0x4e, 0xd0, 0xea, 0xea, 0xf6,
	0xdf, 0xc2, 0x6a, 0x2e, 0xa6, 0x89, 0xee, 0x6d, 0xeb, 0xde, 0x1a, 0x9a, 0x1e, 0xdc, 0xc2, 0x19,
	0x47, 0xa1, 0x8a, 0xc9, 0x3b, 0xba, 0x5d, 0xa9, 0xe9, 0x54, 0xc9, 0x94, 0x4a, 0x26, 0xac, 0x5e,
	0xf1, 0xc4, 0x39, 0xf4, 0x0e, 0xc0, 0x6d, 0x7a, 0x97, 0xa6, 0xc7, 0x3c, 0xf8, 0x69, 0x80, 0x31,
	0x90, 0x23, 0xf3, 0x1b, 0x81, 0xdd, 0xda, 0x73, 0x7d, 0xee, 0xff, 0xff, 0xeb, 0xf2, 0x1b, 0x0e,
	0xce, 0x3e, 0xba, 0x86, 0xb8, 0x8c, 0xfc, 0x85, 0xc0, 0x9d, 0xba, 0xdb, 0x7c, 0x76, 0xa9, 0xe1,
	0x15, 0xad, 0x7d, 0x78, 0x75, 0x6d, 0x99, 0xeb, 0x3b, 0x81, 0xbd, 0xfa, 0x23, 0x7c, 0x71, 0xa9,
	0xe9, 0xff, 0xa8, 0xed, 0x57, 0xd7, 0x51, 0xaf, 0xd3, 0x1d, 0xbe, 0xfd, 0xb1, 0x70, 0xc8, 0xf9,
	0xc2, 0x21, 0xbf, 0x17, 0x0e, 0xf9, 0xbc, 0x74, 0x5a, 0xe7, 0x4b, 0xa7, 0xf5, 0x6b, 0xe9, 0xb4,
	0xde, 0x3f, 0x1d, 0x51, 0x75, 0x96, 0xc5, 0xfe, 0x90, 0x4d, 0x82, 0x8a, 0x53, 0x50, 0x38, 0x05,
	0xb3, 0xa0, 0xfa, 0xa3, 0x9d, 0x73, 0x94, 0x71, 0x57, 0xff, 0xd9, 0x9e, 0xfc, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x23, 0xd3, 0x79, 0x94, 0x85, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	CreateValidPubEvents(ctx context.Context, in *MsgCreateValidPubEvents, opts ...grpc.CallOption) (*MsgCreateValidPubEventsResponse, error)
	CreatePartPubEvents(ctx context.Context, in *MsgCreatePartPubEvents, opts ...grpc.CallOption) (*MsgCreatePartPubEventsResponse, error)
	CreateCreatePubEvents(ctx context.Context, in *MsgCreateCreatePubEvents, opts ...grpc.CallOption) (*MsgCreateCreatePubEventsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateValidPubEvents(ctx context.Context, in *MsgCreateValidPubEvents, opts ...grpc.CallOption) (*MsgCreateValidPubEventsResponse, error) {
	out := new(MsgCreateValidPubEventsResponse)
	err := c.cc.Invoke(ctx, "/VoroshilovMax.bettery.publicevents.Msg/CreateValidPubEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePartPubEvents(ctx context.Context, in *MsgCreatePartPubEvents, opts ...grpc.CallOption) (*MsgCreatePartPubEventsResponse, error) {
	out := new(MsgCreatePartPubEventsResponse)
	err := c.cc.Invoke(ctx, "/VoroshilovMax.bettery.publicevents.Msg/CreatePartPubEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateCreatePubEvents(ctx context.Context, in *MsgCreateCreatePubEvents, opts ...grpc.CallOption) (*MsgCreateCreatePubEventsResponse, error) {
	out := new(MsgCreateCreatePubEventsResponse)
	err := c.cc.Invoke(ctx, "/VoroshilovMax.bettery.publicevents.Msg/CreateCreatePubEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	CreateValidPubEvents(context.Context, *MsgCreateValidPubEvents) (*MsgCreateValidPubEventsResponse, error)
	CreatePartPubEvents(context.Context, *MsgCreatePartPubEvents) (*MsgCreatePartPubEventsResponse, error)
	CreateCreatePubEvents(context.Context, *MsgCreateCreatePubEvents) (*MsgCreateCreatePubEventsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateValidPubEvents(ctx context.Context, req *MsgCreateValidPubEvents) (*MsgCreateValidPubEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidPubEvents not implemented")
}
func (*UnimplementedMsgServer) CreatePartPubEvents(ctx context.Context, req *MsgCreatePartPubEvents) (*MsgCreatePartPubEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartPubEvents not implemented")
}
func (*UnimplementedMsgServer) CreateCreatePubEvents(ctx context.Context, req *MsgCreateCreatePubEvents) (*MsgCreateCreatePubEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCreatePubEvents not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateValidPubEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateValidPubEvents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateValidPubEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoroshilovMax.bettery.publicevents.Msg/CreateValidPubEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateValidPubEvents(ctx, req.(*MsgCreateValidPubEvents))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePartPubEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePartPubEvents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePartPubEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoroshilovMax.bettery.publicevents.Msg/CreatePartPubEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePartPubEvents(ctx, req.(*MsgCreatePartPubEvents))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateCreatePubEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCreatePubEvents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCreatePubEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoroshilovMax.bettery.publicevents.Msg/CreateCreatePubEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCreatePubEvents(ctx, req.(*MsgCreateCreatePubEvents))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "VoroshilovMax.bettery.publicevents.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateValidPubEvents",
			Handler:    _Msg_CreateValidPubEvents_Handler,
		},
		{
			MethodName: "CreatePartPubEvents",
			Handler:    _Msg_CreatePartPubEvents_Handler,
		},
		{
			MethodName: "CreateCreatePubEvents",
			Handler:    _Msg_CreateCreatePubEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publicevents/tx.proto",
}

func (m *MsgCreateValidPubEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateValidPubEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateValidPubEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reput != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Reput))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Answers) > 0 {
		i -= len(m.Answers)
		copy(dAtA[i:], m.Answers)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Answers)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PubId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PubId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateValidPubEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateValidPubEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateValidPubEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePartPubEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePartPubEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePartPubEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Answers) > 0 {
		i -= len(m.Answers)
		copy(dAtA[i:], m.Answers)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Answers)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PubId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PubId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePartPubEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePartPubEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePartPubEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCreatePubEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCreatePubEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCreatePubEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Advisor) > 0 {
		i -= len(m.Advisor)
		copy(dAtA[i:], m.Advisor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Advisor)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ExpertAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpertAmount))
		i--
		dAtA[i] = 0x40
	}
	if m.EndTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x38
	}
	if m.StartTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x30
	}
	if m.PremAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PremAmount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Answers) > 0 {
		for iNdEx := len(m.Answers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Answers[iNdEx])
			copy(dAtA[i:], m.Answers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Answers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Question) > 0 {
		i -= len(m.Question)
		copy(dAtA[i:], m.Question)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Question)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PubId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PubId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCreatePubEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCreatePubEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCreatePubEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateValidPubEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PubId != 0 {
		n += 1 + sovTx(uint64(m.PubId))
	}
	l = len(m.Answers)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Reput != 0 {
		n += 1 + sovTx(uint64(m.Reput))
	}
	return n
}

func (m *MsgCreateValidPubEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgCreatePartPubEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PubId != 0 {
		n += 1 + sovTx(uint64(m.PubId))
	}
	l = len(m.Answers)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	return n
}

func (m *MsgCreatePartPubEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgCreateCreatePubEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PubId != 0 {
		n += 1 + sovTx(uint64(m.PubId))
	}
	l = len(m.Question)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Answers) > 0 {
		for _, s := range m.Answers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.PremAmount != 0 {
		n += 1 + sovTx(uint64(m.PremAmount))
	}
	if m.StartTime != 0 {
		n += 1 + sovTx(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovTx(uint64(m.EndTime))
	}
	if m.ExpertAmount != 0 {
		n += 1 + sovTx(uint64(m.ExpertAmount))
	}
	l = len(m.Advisor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateCreatePubEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateValidPubEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateValidPubEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateValidPubEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubId", wireType)
			}
			m.PubId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PubId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reput", wireType)
			}
			m.Reput = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reput |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateValidPubEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateValidPubEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateValidPubEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePartPubEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePartPubEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePartPubEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubId", wireType)
			}
			m.PubId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PubId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePartPubEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePartPubEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePartPubEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCreatePubEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCreatePubEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCreatePubEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubId", wireType)
			}
			m.PubId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PubId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Question", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Question = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answers = append(m.Answers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremAmount", wireType)
			}
			m.PremAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PremAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpertAmount", wireType)
			}
			m.ExpertAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpertAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Advisor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Advisor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCreatePubEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCreatePubEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCreatePubEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
