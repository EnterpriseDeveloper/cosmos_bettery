// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: publicevents/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetFihishPubEventRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetFihishPubEventRequest) Reset()         { *m = QueryGetFihishPubEventRequest{} }
func (m *QueryGetFihishPubEventRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFihishPubEventRequest) ProtoMessage()    {}
func (*QueryGetFihishPubEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{0}
}
func (m *QueryGetFihishPubEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFihishPubEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFihishPubEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFihishPubEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFihishPubEventRequest.Merge(m, src)
}
func (m *QueryGetFihishPubEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFihishPubEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFihishPubEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFihishPubEventRequest proto.InternalMessageInfo

func (m *QueryGetFihishPubEventRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetFihishPubEventResponse struct {
	FihishPubEvent *FihishPubEvent `protobuf:"bytes,1,opt,name=FihishPubEvent,proto3" json:"FihishPubEvent,omitempty"`
}

func (m *QueryGetFihishPubEventResponse) Reset()         { *m = QueryGetFihishPubEventResponse{} }
func (m *QueryGetFihishPubEventResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFihishPubEventResponse) ProtoMessage()    {}
func (*QueryGetFihishPubEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{1}
}
func (m *QueryGetFihishPubEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFihishPubEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFihishPubEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFihishPubEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFihishPubEventResponse.Merge(m, src)
}
func (m *QueryGetFihishPubEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFihishPubEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFihishPubEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFihishPubEventResponse proto.InternalMessageInfo

func (m *QueryGetFihishPubEventResponse) GetFihishPubEvent() *FihishPubEvent {
	if m != nil {
		return m.FihishPubEvent
	}
	return nil
}

type QueryAllFihishPubEventRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFihishPubEventRequest) Reset()         { *m = QueryAllFihishPubEventRequest{} }
func (m *QueryAllFihishPubEventRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllFihishPubEventRequest) ProtoMessage()    {}
func (*QueryAllFihishPubEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{2}
}
func (m *QueryAllFihishPubEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFihishPubEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFihishPubEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFihishPubEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFihishPubEventRequest.Merge(m, src)
}
func (m *QueryAllFihishPubEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFihishPubEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFihishPubEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFihishPubEventRequest proto.InternalMessageInfo

func (m *QueryAllFihishPubEventRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllFihishPubEventResponse struct {
	FihishPubEvent []*FihishPubEvent   `protobuf:"bytes,1,rep,name=FihishPubEvent,proto3" json:"FihishPubEvent,omitempty"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllFihishPubEventResponse) Reset()         { *m = QueryAllFihishPubEventResponse{} }
func (m *QueryAllFihishPubEventResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllFihishPubEventResponse) ProtoMessage()    {}
func (*QueryAllFihishPubEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{3}
}
func (m *QueryAllFihishPubEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllFihishPubEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllFihishPubEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllFihishPubEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllFihishPubEventResponse.Merge(m, src)
}
func (m *QueryAllFihishPubEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllFihishPubEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllFihishPubEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllFihishPubEventResponse proto.InternalMessageInfo

func (m *QueryAllFihishPubEventResponse) GetFihishPubEvent() []*FihishPubEvent {
	if m != nil {
		return m.FihishPubEvent
	}
	return nil
}

func (m *QueryAllFihishPubEventResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetValidPubEventsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetValidPubEventsRequest) Reset()         { *m = QueryGetValidPubEventsRequest{} }
func (m *QueryGetValidPubEventsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidPubEventsRequest) ProtoMessage()    {}
func (*QueryGetValidPubEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{4}
}
func (m *QueryGetValidPubEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidPubEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidPubEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidPubEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidPubEventsRequest.Merge(m, src)
}
func (m *QueryGetValidPubEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidPubEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidPubEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidPubEventsRequest proto.InternalMessageInfo

func (m *QueryGetValidPubEventsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetValidPubEventsResponse struct {
	ValidPubEvents *ValidPubEvents `protobuf:"bytes,1,opt,name=ValidPubEvents,proto3" json:"ValidPubEvents,omitempty"`
}

func (m *QueryGetValidPubEventsResponse) Reset()         { *m = QueryGetValidPubEventsResponse{} }
func (m *QueryGetValidPubEventsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidPubEventsResponse) ProtoMessage()    {}
func (*QueryGetValidPubEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{5}
}
func (m *QueryGetValidPubEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidPubEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidPubEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidPubEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidPubEventsResponse.Merge(m, src)
}
func (m *QueryGetValidPubEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidPubEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidPubEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidPubEventsResponse proto.InternalMessageInfo

func (m *QueryGetValidPubEventsResponse) GetValidPubEvents() *ValidPubEvents {
	if m != nil {
		return m.ValidPubEvents
	}
	return nil
}

type QueryAllValidPubEventsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidPubEventsRequest) Reset()         { *m = QueryAllValidPubEventsRequest{} }
func (m *QueryAllValidPubEventsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidPubEventsRequest) ProtoMessage()    {}
func (*QueryAllValidPubEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{6}
}
func (m *QueryAllValidPubEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidPubEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidPubEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidPubEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidPubEventsRequest.Merge(m, src)
}
func (m *QueryAllValidPubEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidPubEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidPubEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidPubEventsRequest proto.InternalMessageInfo

func (m *QueryAllValidPubEventsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllValidPubEventsResponse struct {
	ValidPubEvents []*ValidPubEvents   `protobuf:"bytes,1,rep,name=ValidPubEvents,proto3" json:"ValidPubEvents,omitempty"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidPubEventsResponse) Reset()         { *m = QueryAllValidPubEventsResponse{} }
func (m *QueryAllValidPubEventsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidPubEventsResponse) ProtoMessage()    {}
func (*QueryAllValidPubEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{7}
}
func (m *QueryAllValidPubEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidPubEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidPubEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidPubEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidPubEventsResponse.Merge(m, src)
}
func (m *QueryAllValidPubEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidPubEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidPubEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidPubEventsResponse proto.InternalMessageInfo

func (m *QueryAllValidPubEventsResponse) GetValidPubEvents() []*ValidPubEvents {
	if m != nil {
		return m.ValidPubEvents
	}
	return nil
}

func (m *QueryAllValidPubEventsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPartPubEventsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPartPubEventsRequest) Reset()         { *m = QueryGetPartPubEventsRequest{} }
func (m *QueryGetPartPubEventsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPartPubEventsRequest) ProtoMessage()    {}
func (*QueryGetPartPubEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{8}
}
func (m *QueryGetPartPubEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPartPubEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPartPubEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPartPubEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPartPubEventsRequest.Merge(m, src)
}
func (m *QueryGetPartPubEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPartPubEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPartPubEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPartPubEventsRequest proto.InternalMessageInfo

func (m *QueryGetPartPubEventsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPartPubEventsResponse struct {
	PartPubEvents *PartPubEvents `protobuf:"bytes,1,opt,name=PartPubEvents,proto3" json:"PartPubEvents,omitempty"`
}

func (m *QueryGetPartPubEventsResponse) Reset()         { *m = QueryGetPartPubEventsResponse{} }
func (m *QueryGetPartPubEventsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPartPubEventsResponse) ProtoMessage()    {}
func (*QueryGetPartPubEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{9}
}
func (m *QueryGetPartPubEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPartPubEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPartPubEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPartPubEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPartPubEventsResponse.Merge(m, src)
}
func (m *QueryGetPartPubEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPartPubEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPartPubEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPartPubEventsResponse proto.InternalMessageInfo

func (m *QueryGetPartPubEventsResponse) GetPartPubEvents() *PartPubEvents {
	if m != nil {
		return m.PartPubEvents
	}
	return nil
}

type QueryAllPartPubEventsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPartPubEventsRequest) Reset()         { *m = QueryAllPartPubEventsRequest{} }
func (m *QueryAllPartPubEventsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPartPubEventsRequest) ProtoMessage()    {}
func (*QueryAllPartPubEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{10}
}
func (m *QueryAllPartPubEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPartPubEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPartPubEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPartPubEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPartPubEventsRequest.Merge(m, src)
}
func (m *QueryAllPartPubEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPartPubEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPartPubEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPartPubEventsRequest proto.InternalMessageInfo

func (m *QueryAllPartPubEventsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPartPubEventsResponse struct {
	PartPubEvents []*PartPubEvents    `protobuf:"bytes,1,rep,name=PartPubEvents,proto3" json:"PartPubEvents,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPartPubEventsResponse) Reset()         { *m = QueryAllPartPubEventsResponse{} }
func (m *QueryAllPartPubEventsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPartPubEventsResponse) ProtoMessage()    {}
func (*QueryAllPartPubEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{11}
}
func (m *QueryAllPartPubEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPartPubEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPartPubEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPartPubEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPartPubEventsResponse.Merge(m, src)
}
func (m *QueryAllPartPubEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPartPubEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPartPubEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPartPubEventsResponse proto.InternalMessageInfo

func (m *QueryAllPartPubEventsResponse) GetPartPubEvents() []*PartPubEvents {
	if m != nil {
		return m.PartPubEvents
	}
	return nil
}

func (m *QueryAllPartPubEventsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCreatePubEventsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCreatePubEventsRequest) Reset()         { *m = QueryGetCreatePubEventsRequest{} }
func (m *QueryGetCreatePubEventsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreatePubEventsRequest) ProtoMessage()    {}
func (*QueryGetCreatePubEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{12}
}
func (m *QueryGetCreatePubEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreatePubEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreatePubEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreatePubEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreatePubEventsRequest.Merge(m, src)
}
func (m *QueryGetCreatePubEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreatePubEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreatePubEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreatePubEventsRequest proto.InternalMessageInfo

func (m *QueryGetCreatePubEventsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCreatePubEventsResponse struct {
	CreatePubEvents *CreatePubEvents `protobuf:"bytes,1,opt,name=CreatePubEvents,proto3" json:"CreatePubEvents,omitempty"`
}

func (m *QueryGetCreatePubEventsResponse) Reset()         { *m = QueryGetCreatePubEventsResponse{} }
func (m *QueryGetCreatePubEventsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreatePubEventsResponse) ProtoMessage()    {}
func (*QueryGetCreatePubEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{13}
}
func (m *QueryGetCreatePubEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreatePubEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreatePubEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreatePubEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreatePubEventsResponse.Merge(m, src)
}
func (m *QueryGetCreatePubEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreatePubEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreatePubEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreatePubEventsResponse proto.InternalMessageInfo

func (m *QueryGetCreatePubEventsResponse) GetCreatePubEvents() *CreatePubEvents {
	if m != nil {
		return m.CreatePubEvents
	}
	return nil
}

type QueryAllCreatePubEventsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCreatePubEventsRequest) Reset()         { *m = QueryAllCreatePubEventsRequest{} }
func (m *QueryAllCreatePubEventsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCreatePubEventsRequest) ProtoMessage()    {}
func (*QueryAllCreatePubEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{14}
}
func (m *QueryAllCreatePubEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCreatePubEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCreatePubEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCreatePubEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCreatePubEventsRequest.Merge(m, src)
}
func (m *QueryAllCreatePubEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCreatePubEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCreatePubEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCreatePubEventsRequest proto.InternalMessageInfo

func (m *QueryAllCreatePubEventsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCreatePubEventsResponse struct {
	CreatePubEvents []*CreatePubEvents  `protobuf:"bytes,1,rep,name=CreatePubEvents,proto3" json:"CreatePubEvents,omitempty"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCreatePubEventsResponse) Reset()         { *m = QueryAllCreatePubEventsResponse{} }
func (m *QueryAllCreatePubEventsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCreatePubEventsResponse) ProtoMessage()    {}
func (*QueryAllCreatePubEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_668bd8c5c29a02c6, []int{15}
}
func (m *QueryAllCreatePubEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCreatePubEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCreatePubEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCreatePubEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCreatePubEventsResponse.Merge(m, src)
}
func (m *QueryAllCreatePubEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCreatePubEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCreatePubEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCreatePubEventsResponse proto.InternalMessageInfo

func (m *QueryAllCreatePubEventsResponse) GetCreatePubEvents() []*CreatePubEvents {
	if m != nil {
		return m.CreatePubEvents
	}
	return nil
}

func (m *QueryAllCreatePubEventsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetFihishPubEventRequest)(nil), "VoroshilovMax.bettery.publicevents.QueryGetFihishPubEventRequest")
	proto.RegisterType((*QueryGetFihishPubEventResponse)(nil), "VoroshilovMax.bettery.publicevents.QueryGetFihishPubEventResponse")
	proto.RegisterType((*QueryAllFihishPubEventRequest)(nil), "VoroshilovMax.bettery.publicevents.QueryAllFihishPubEventRequest")
	proto.RegisterType((*QueryAllFihishPubEventResponse)(nil), "VoroshilovMax.bettery.publicevents.QueryAllFihishPubEventResponse")
	proto.RegisterType((*QueryGetValidPubEventsRequest)(nil), "VoroshilovMax.bettery.publicevents.QueryGetValidPubEventsRequest")
	proto.RegisterType((*QueryGetValidPubEventsResponse)(nil), "VoroshilovMax.bettery.publicevents.QueryGetValidPubEventsResponse")
	proto.RegisterType((*QueryAllValidPubEventsRequest)(nil), "VoroshilovMax.bettery.publicevents.QueryAllValidPubEventsRequest")
	proto.RegisterType((*QueryAllValidPubEventsResponse)(nil), "VoroshilovMax.bettery.publicevents.QueryAllValidPubEventsResponse")
	proto.RegisterType((*QueryGetPartPubEventsRequest)(nil), "VoroshilovMax.bettery.publicevents.QueryGetPartPubEventsRequest")
	proto.RegisterType((*QueryGetPartPubEventsResponse)(nil), "VoroshilovMax.bettery.publicevents.QueryGetPartPubEventsResponse")
	proto.RegisterType((*QueryAllPartPubEventsRequest)(nil), "VoroshilovMax.bettery.publicevents.QueryAllPartPubEventsRequest")
	proto.RegisterType((*QueryAllPartPubEventsResponse)(nil), "VoroshilovMax.bettery.publicevents.QueryAllPartPubEventsResponse")
	proto.RegisterType((*QueryGetCreatePubEventsRequest)(nil), "VoroshilovMax.bettery.publicevents.QueryGetCreatePubEventsRequest")
	proto.RegisterType((*QueryGetCreatePubEventsResponse)(nil), "VoroshilovMax.bettery.publicevents.QueryGetCreatePubEventsResponse")
	proto.RegisterType((*QueryAllCreatePubEventsRequest)(nil), "VoroshilovMax.bettery.publicevents.QueryAllCreatePubEventsRequest")
	proto.RegisterType((*QueryAllCreatePubEventsResponse)(nil), "VoroshilovMax.bettery.publicevents.QueryAllCreatePubEventsResponse")
}

func init() { proto.RegisterFile("publicevents/query.proto", fileDescriptor_668bd8c5c29a02c6) }

var fileDescriptor_668bd8c5c29a02c6 = []byte{
	// 755 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0xc1, 0x6a, 0x13, 0x41,
	0x18, 0xc7, 0x3b, 0x89, 0x7a, 0x18, 0x69, 0xd5, 0x39, 0x95, 0x50, 0x57, 0x59, 0x45, 0xc5, 0xc3,
	0xae, 0x49, 0xac, 0xb6, 0x15, 0xb4, 0x69, 0xb1, 0x3d, 0x89, 0xb5, 0x87, 0x0a, 0x05, 0x29, 0xbb,
	0xc9, 0x34, 0x19, 0xd8, 0x66, 0xb6, 0x99, 0x49, 0x68, 0x51, 0x41, 0x7c, 0x02, 0xc1, 0x27, 0xf2,
	0x20, 0xe8, 0xad, 0xa8, 0x68, 0x11, 0x0f, 0xd2, 0xfa, 0x20, 0x92, 0xd9, 0x09, 0x9b, 0x99, 0xee,
	0x36, 0x3b, 0x66, 0xbd, 0x76, 0xbe, 0xf9, 0xcf, 0xf7, 0x9b, 0xdf, 0xee, 0x7e, 0x0d, 0x9c, 0x0e,
	0xbb, 0x7e, 0x40, 0xea, 0xb8, 0x87, 0xdb, 0x9c, 0xb9, 0xbb, 0x5d, 0xdc, 0xd9, 0x77, 0xc2, 0x0e,
	0xe5, 0x14, 0xd9, 0x1b, 0xb4, 0x43, 0x59, 0x8b, 0x04, 0xb4, 0xf7, 0xc4, 0xdb, 0x73, 0x7c, 0xcc,
	0xb9, 0x58, 0x1c, 0xaa, 0x2f, 0xcd, 0x34, 0x29, 0x6d, 0x06, 0xd8, 0xf5, 0x42, 0xe2, 0x7a, 0xed,
	0x36, 0xe5, 0x1e, 0x27, 0xb4, 0xcd, 0xa2, 0x84, 0xd2, 0xed, 0x3a, 0x65, 0x3b, 0x94, 0xb9, 0xbe,
	0xc7, 0x70, 0x14, 0xed, 0xf6, 0xca, 0x3e, 0xe6, 0x5e, 0xd9, 0x0d, 0xbd, 0x26, 0x69, 0x8b, 0x62,
	0x59, 0x7b, 0x4d, 0xe9, 0x63, 0x9b, 0xb4, 0x08, 0x6b, 0x6d, 0x85, 0x5d, 0x7f, 0x4b, 0xfc, 0x25,
	0xb1, 0xa8, 0xe7, 0x05, 0xa4, 0x11, 0xd7, 0x0c, 0x4e, 0xb5, 0x95, 0xa2, 0xd0, 0xeb, 0xf0, 0x93,
	0x35, 0xd7, 0x95, 0x9a, 0x7a, 0x07, 0x7b, 0x1c, 0x9f, 0xa8, 0xb2, 0x5d, 0x78, 0xf9, 0x59, 0xbf,
	0xeb, 0x55, 0xcc, 0x57, 0x44, 0x43, 0x6b, 0x5d, 0xff, 0x71, 0xbf, 0x60, 0x1d, 0xef, 0x76, 0x31,
	0xe3, 0x68, 0x0a, 0x16, 0x48, 0x63, 0x1a, 0x5c, 0x05, 0xb7, 0xce, 0xac, 0x17, 0x48, 0xc3, 0x7e,
	0x05, 0xad, 0xb4, 0x0d, 0x2c, 0xa4, 0x6d, 0x86, 0xd1, 0x26, 0x9c, 0x52, 0x57, 0xc4, 0xee, 0xf3,
	0x95, 0x8a, 0x33, 0xfa, 0xb6, 0x1d, 0x2d, 0x53, 0x4b, 0xb2, 0x9b, 0xb2, 0xdd, 0x5a, 0x10, 0x24,
	0xb7, 0xbb, 0x02, 0x61, 0x7c, 0xef, 0xf2, 0xe0, 0x1b, 0x4e, 0x24, 0xc9, 0xe9, 0x4b, 0x72, 0x22,
	0xff, 0x52, 0x92, 0xb3, 0xe6, 0x35, 0xb1, 0xdc, 0xbb, 0x3e, 0xb4, 0xd3, 0xfe, 0x08, 0x24, 0x67,
	0xc2, 0x49, 0xa7, 0x70, 0x16, 0xf3, 0xe1, 0x44, 0xab, 0x0a, 0x46, 0x41, 0x60, 0xdc, 0x1c, 0x89,
	0x11, 0x35, 0xa6, 0x70, 0x0c, 0xf9, 0xdd, 0xe8, 0x3f, 0x4b, 0x83, 0x13, 0x58, 0x06, 0xbf, 0xfa,
	0x86, 0x98, 0x5b, 0x5d, 0x31, 0xf1, 0xab, 0x65, 0x6a, 0x49, 0xc3, 0x7e, 0x93, 0xdb, 0xfd, 0x1f,
	0x7e, 0x0d, 0x38, 0x8b, 0xf9, 0x70, 0xe6, 0xe7, 0xd7, 0x81, 0x33, 0x03, 0x5d, 0x6b, 0x5e, 0x87,
	0x8f, 0xd4, 0xbb, 0x17, 0x3f, 0x0f, 0x5a, 0xbd, 0xa4, 0x7e, 0x0e, 0x27, 0x95, 0x05, 0x79, 0xc7,
	0xe5, 0x2c, 0xd0, 0x6a, 0xa2, 0x9a, 0x63, 0x6f, 0xcb, 0x4e, 0x6b, 0x41, 0x90, 0xd8, 0x69, 0x5e,
	0x66, 0x3f, 0x80, 0xf8, 0x19, 0xca, 0x8c, 0x58, 0xcc, 0x03, 0x31, 0x3f, 0xab, 0x77, 0xe2, 0x97,
	0x70, 0x59, 0x7c, 0xb8, 0x47, 0x7a, 0x7d, 0x03, 0xe0, 0x95, 0xd4, 0x2d, 0x92, 0xfb, 0x05, 0xbc,
	0xa0, 0x2d, 0xc9, 0x6b, 0xae, 0x66, 0x21, 0xd7, 0x53, 0xf5, 0x2c, 0xbb, 0x15, 0xbf, 0x51, 0x29,
	0x4d, 0xe7, 0xa5, 0xf8, 0xf3, 0x00, 0x36, 0xe9, 0xa8, 0xd3, 0x60, 0x8b, 0x79, 0xc1, 0xe6, 0xa6,
	0xba, 0xf2, 0x63, 0x12, 0x9e, 0x15, 0x2c, 0xe8, 0x10, 0xe8, 0x03, 0x05, 0xd5, 0xb2, 0xf4, 0x7a,
	0xea, 0xfc, 0x2e, 0x2d, 0x8d, 0x13, 0x11, 0xf5, 0x6b, 0x3f, 0x7a, 0xfb, 0xf5, 0xcf, 0xfb, 0xc2,
	0x3c, 0xba, 0xef, 0x2a, 0x59, 0xae, 0xcc, 0x72, 0x13, 0xfe, 0xaf, 0x19, 0x64, 0xb8, 0x2f, 0x49,
	0xe3, 0x35, 0xfa, 0x0e, 0xe0, 0x25, 0x35, 0xbb, 0x16, 0x04, 0x06, 0x74, 0x69, 0xe3, 0xde, 0x80,
	0x2e, 0x75, 0x8e, 0xdb, 0x0b, 0x82, 0xee, 0x2e, 0xaa, 0x98, 0xd3, 0x09, 0x67, 0xda, 0xa7, 0xdd,
	0xc8, 0x59, 0xe2, 0x90, 0x33, 0x73, 0x96, 0x3c, 0xbd, 0xcc, 0x9c, 0xf5, 0x94, 0x8c, 0xd8, 0x99,
	0x9a, 0x6d, 0xec, 0x6c, 0x5c, 0xba, 0xd4, 0xd9, 0x6c, 0xe6, 0x4c, 0xa5, 0x43, 0xdf, 0x80, 0xf6,
	0xfd, 0x47, 0x8b, 0x26, 0xf7, 0x9d, 0x34, 0xbc, 0x4a, 0xb5, 0x31, 0x12, 0x24, 0xd2, 0x43, 0x81,
	0x34, 0x87, 0xee, 0x65, 0x41, 0x0a, 0x87, 0x23, 0x22, 0x5f, 0x5f, 0x00, 0xbc, 0xa8, 0x24, 0xf7,
	0x75, 0x2d, 0x9a, 0xdc, 0xf5, 0x98, 0x64, 0x69, 0xf3, 0xd6, 0x9e, 0x17, 0x64, 0x55, 0x54, 0x36,
	0x26, 0x43, 0xbf, 0xc0, 0x89, 0xcf, 0x38, 0x32, 0x7a, 0x3b, 0x92, 0x27, 0x51, 0x69, 0x79, 0xac,
	0x0c, 0xc9, 0xb5, 0x28, 0xb8, 0x16, 0xd0, 0x5c, 0x16, 0xae, 0xba, 0x1a, 0x12, 0x39, 0xfb, 0x09,
	0x20, 0xd2, 0xd2, 0xfb, 0xd6, 0x8c, 0xde, 0x90, 0xb1, 0x09, 0xd3, 0x87, 0xa8, 0xfd, 0x40, 0x10,
	0xce, 0xa2, 0xea, 0x3f, 0x10, 0x2e, 0x3d, 0xfd, 0x74, 0x64, 0x81, 0x83, 0x23, 0x0b, 0xfc, 0x3e,
	0xb2, 0xc0, 0xbb, 0x63, 0x6b, 0xe2, 0xe0, 0xd8, 0x9a, 0x38, 0x3c, 0xb6, 0x26, 0x36, 0x67, 0x9b,
	0x84, 0xb7, 0xba, 0xbe, 0x53, 0xa7, 0x3b, 0x29, 0xc1, 0x7b, 0x6a, 0x34, 0xdf, 0x0f, 0x31, 0xf3,
	0xcf, 0x89, 0x9f, 0xac, 0xd5, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xab, 0x73, 0x85, 0x8a, 0xd0,
	0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a fihishPubEvent by id.
	FihishPubEvent(ctx context.Context, in *QueryGetFihishPubEventRequest, opts ...grpc.CallOption) (*QueryGetFihishPubEventResponse, error)
	// Queries a list of fihishPubEvent items.
	FihishPubEventAll(ctx context.Context, in *QueryAllFihishPubEventRequest, opts ...grpc.CallOption) (*QueryAllFihishPubEventResponse, error)
	// Queries a validPubEvents by id.
	ValidPubEvents(ctx context.Context, in *QueryGetValidPubEventsRequest, opts ...grpc.CallOption) (*QueryGetValidPubEventsResponse, error)
	// Queries a list of validPubEvents items.
	ValidPubEventsAll(ctx context.Context, in *QueryAllValidPubEventsRequest, opts ...grpc.CallOption) (*QueryAllValidPubEventsResponse, error)
	// Queries a partPubEvents by id.
	PartPubEvents(ctx context.Context, in *QueryGetPartPubEventsRequest, opts ...grpc.CallOption) (*QueryGetPartPubEventsResponse, error)
	// Queries a list of partPubEvents items.
	PartPubEventsAll(ctx context.Context, in *QueryAllPartPubEventsRequest, opts ...grpc.CallOption) (*QueryAllPartPubEventsResponse, error)
	// Queries a createPubEvents by id.
	CreatePubEvents(ctx context.Context, in *QueryGetCreatePubEventsRequest, opts ...grpc.CallOption) (*QueryGetCreatePubEventsResponse, error)
	// Queries a list of createPubEvents items.
	CreatePubEventsAll(ctx context.Context, in *QueryAllCreatePubEventsRequest, opts ...grpc.CallOption) (*QueryAllCreatePubEventsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) FihishPubEvent(ctx context.Context, in *QueryGetFihishPubEventRequest, opts ...grpc.CallOption) (*QueryGetFihishPubEventResponse, error) {
	out := new(QueryGetFihishPubEventResponse)
	err := c.cc.Invoke(ctx, "/VoroshilovMax.bettery.publicevents.Query/FihishPubEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FihishPubEventAll(ctx context.Context, in *QueryAllFihishPubEventRequest, opts ...grpc.CallOption) (*QueryAllFihishPubEventResponse, error) {
	out := new(QueryAllFihishPubEventResponse)
	err := c.cc.Invoke(ctx, "/VoroshilovMax.bettery.publicevents.Query/FihishPubEventAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidPubEvents(ctx context.Context, in *QueryGetValidPubEventsRequest, opts ...grpc.CallOption) (*QueryGetValidPubEventsResponse, error) {
	out := new(QueryGetValidPubEventsResponse)
	err := c.cc.Invoke(ctx, "/VoroshilovMax.bettery.publicevents.Query/ValidPubEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidPubEventsAll(ctx context.Context, in *QueryAllValidPubEventsRequest, opts ...grpc.CallOption) (*QueryAllValidPubEventsResponse, error) {
	out := new(QueryAllValidPubEventsResponse)
	err := c.cc.Invoke(ctx, "/VoroshilovMax.bettery.publicevents.Query/ValidPubEventsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PartPubEvents(ctx context.Context, in *QueryGetPartPubEventsRequest, opts ...grpc.CallOption) (*QueryGetPartPubEventsResponse, error) {
	out := new(QueryGetPartPubEventsResponse)
	err := c.cc.Invoke(ctx, "/VoroshilovMax.bettery.publicevents.Query/PartPubEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PartPubEventsAll(ctx context.Context, in *QueryAllPartPubEventsRequest, opts ...grpc.CallOption) (*QueryAllPartPubEventsResponse, error) {
	out := new(QueryAllPartPubEventsResponse)
	err := c.cc.Invoke(ctx, "/VoroshilovMax.bettery.publicevents.Query/PartPubEventsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreatePubEvents(ctx context.Context, in *QueryGetCreatePubEventsRequest, opts ...grpc.CallOption) (*QueryGetCreatePubEventsResponse, error) {
	out := new(QueryGetCreatePubEventsResponse)
	err := c.cc.Invoke(ctx, "/VoroshilovMax.bettery.publicevents.Query/CreatePubEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreatePubEventsAll(ctx context.Context, in *QueryAllCreatePubEventsRequest, opts ...grpc.CallOption) (*QueryAllCreatePubEventsResponse, error) {
	out := new(QueryAllCreatePubEventsResponse)
	err := c.cc.Invoke(ctx, "/VoroshilovMax.bettery.publicevents.Query/CreatePubEventsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a fihishPubEvent by id.
	FihishPubEvent(context.Context, *QueryGetFihishPubEventRequest) (*QueryGetFihishPubEventResponse, error)
	// Queries a list of fihishPubEvent items.
	FihishPubEventAll(context.Context, *QueryAllFihishPubEventRequest) (*QueryAllFihishPubEventResponse, error)
	// Queries a validPubEvents by id.
	ValidPubEvents(context.Context, *QueryGetValidPubEventsRequest) (*QueryGetValidPubEventsResponse, error)
	// Queries a list of validPubEvents items.
	ValidPubEventsAll(context.Context, *QueryAllValidPubEventsRequest) (*QueryAllValidPubEventsResponse, error)
	// Queries a partPubEvents by id.
	PartPubEvents(context.Context, *QueryGetPartPubEventsRequest) (*QueryGetPartPubEventsResponse, error)
	// Queries a list of partPubEvents items.
	PartPubEventsAll(context.Context, *QueryAllPartPubEventsRequest) (*QueryAllPartPubEventsResponse, error)
	// Queries a createPubEvents by id.
	CreatePubEvents(context.Context, *QueryGetCreatePubEventsRequest) (*QueryGetCreatePubEventsResponse, error)
	// Queries a list of createPubEvents items.
	CreatePubEventsAll(context.Context, *QueryAllCreatePubEventsRequest) (*QueryAllCreatePubEventsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) FihishPubEvent(ctx context.Context, req *QueryGetFihishPubEventRequest) (*QueryGetFihishPubEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FihishPubEvent not implemented")
}
func (*UnimplementedQueryServer) FihishPubEventAll(ctx context.Context, req *QueryAllFihishPubEventRequest) (*QueryAllFihishPubEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FihishPubEventAll not implemented")
}
func (*UnimplementedQueryServer) ValidPubEvents(ctx context.Context, req *QueryGetValidPubEventsRequest) (*QueryGetValidPubEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidPubEvents not implemented")
}
func (*UnimplementedQueryServer) ValidPubEventsAll(ctx context.Context, req *QueryAllValidPubEventsRequest) (*QueryAllValidPubEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidPubEventsAll not implemented")
}
func (*UnimplementedQueryServer) PartPubEvents(ctx context.Context, req *QueryGetPartPubEventsRequest) (*QueryGetPartPubEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartPubEvents not implemented")
}
func (*UnimplementedQueryServer) PartPubEventsAll(ctx context.Context, req *QueryAllPartPubEventsRequest) (*QueryAllPartPubEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartPubEventsAll not implemented")
}
func (*UnimplementedQueryServer) CreatePubEvents(ctx context.Context, req *QueryGetCreatePubEventsRequest) (*QueryGetCreatePubEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePubEvents not implemented")
}
func (*UnimplementedQueryServer) CreatePubEventsAll(ctx context.Context, req *QueryAllCreatePubEventsRequest) (*QueryAllCreatePubEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePubEventsAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_FihishPubEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFihishPubEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FihishPubEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoroshilovMax.bettery.publicevents.Query/FihishPubEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FihishPubEvent(ctx, req.(*QueryGetFihishPubEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FihishPubEventAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllFihishPubEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FihishPubEventAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoroshilovMax.bettery.publicevents.Query/FihishPubEventAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FihishPubEventAll(ctx, req.(*QueryAllFihishPubEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidPubEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidPubEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidPubEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoroshilovMax.bettery.publicevents.Query/ValidPubEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidPubEvents(ctx, req.(*QueryGetValidPubEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidPubEventsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllValidPubEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidPubEventsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoroshilovMax.bettery.publicevents.Query/ValidPubEventsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidPubEventsAll(ctx, req.(*QueryAllValidPubEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PartPubEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPartPubEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PartPubEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoroshilovMax.bettery.publicevents.Query/PartPubEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PartPubEvents(ctx, req.(*QueryGetPartPubEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PartPubEventsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPartPubEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PartPubEventsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoroshilovMax.bettery.publicevents.Query/PartPubEventsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PartPubEventsAll(ctx, req.(*QueryAllPartPubEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreatePubEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCreatePubEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreatePubEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoroshilovMax.bettery.publicevents.Query/CreatePubEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreatePubEvents(ctx, req.(*QueryGetCreatePubEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreatePubEventsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCreatePubEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreatePubEventsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VoroshilovMax.bettery.publicevents.Query/CreatePubEventsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreatePubEventsAll(ctx, req.(*QueryAllCreatePubEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "VoroshilovMax.bettery.publicevents.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FihishPubEvent",
			Handler:    _Query_FihishPubEvent_Handler,
		},
		{
			MethodName: "FihishPubEventAll",
			Handler:    _Query_FihishPubEventAll_Handler,
		},
		{
			MethodName: "ValidPubEvents",
			Handler:    _Query_ValidPubEvents_Handler,
		},
		{
			MethodName: "ValidPubEventsAll",
			Handler:    _Query_ValidPubEventsAll_Handler,
		},
		{
			MethodName: "PartPubEvents",
			Handler:    _Query_PartPubEvents_Handler,
		},
		{
			MethodName: "PartPubEventsAll",
			Handler:    _Query_PartPubEventsAll_Handler,
		},
		{
			MethodName: "CreatePubEvents",
			Handler:    _Query_CreatePubEvents_Handler,
		},
		{
			MethodName: "CreatePubEventsAll",
			Handler:    _Query_CreatePubEventsAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publicevents/query.proto",
}

func (m *QueryGetFihishPubEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFihishPubEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFihishPubEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFihishPubEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFihishPubEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFihishPubEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FihishPubEvent != nil {
		{
			size, err := m.FihishPubEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFihishPubEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFihishPubEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFihishPubEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllFihishPubEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllFihishPubEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllFihishPubEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FihishPubEvent) > 0 {
		for iNdEx := len(m.FihishPubEvent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FihishPubEvent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidPubEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidPubEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidPubEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidPubEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidPubEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidPubEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValidPubEvents != nil {
		{
			size, err := m.ValidPubEvents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValidPubEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidPubEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidPubEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValidPubEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidPubEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidPubEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidPubEvents) > 0 {
		for iNdEx := len(m.ValidPubEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidPubEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPartPubEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPartPubEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPartPubEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPartPubEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPartPubEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPartPubEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PartPubEvents != nil {
		{
			size, err := m.PartPubEvents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPartPubEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPartPubEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPartPubEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPartPubEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPartPubEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPartPubEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PartPubEvents) > 0 {
		for iNdEx := len(m.PartPubEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PartPubEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreatePubEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreatePubEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreatePubEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreatePubEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreatePubEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreatePubEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatePubEvents != nil {
		{
			size, err := m.CreatePubEvents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCreatePubEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCreatePubEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCreatePubEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCreatePubEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCreatePubEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCreatePubEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreatePubEvents) > 0 {
		for iNdEx := len(m.CreatePubEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreatePubEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetFihishPubEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetFihishPubEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FihishPubEvent != nil {
		l = m.FihishPubEvent.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFihishPubEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllFihishPubEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FihishPubEvent) > 0 {
		for _, e := range m.FihishPubEvent {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidPubEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetValidPubEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidPubEvents != nil {
		l = m.ValidPubEvents.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValidPubEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValidPubEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ValidPubEvents) > 0 {
		for _, e := range m.ValidPubEvents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPartPubEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPartPubEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartPubEvents != nil {
		l = m.PartPubEvents.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPartPubEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPartPubEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PartPubEvents) > 0 {
		for _, e := range m.PartPubEvents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCreatePubEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCreatePubEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatePubEvents != nil {
		l = m.CreatePubEvents.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCreatePubEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCreatePubEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CreatePubEvents) > 0 {
		for _, e := range m.CreatePubEvents {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetFihishPubEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFihishPubEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFihishPubEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFihishPubEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFihishPubEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFihishPubEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FihishPubEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FihishPubEvent == nil {
				m.FihishPubEvent = &FihishPubEvent{}
			}
			if err := m.FihishPubEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFihishPubEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFihishPubEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFihishPubEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllFihishPubEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllFihishPubEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllFihishPubEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FihishPubEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FihishPubEvent = append(m.FihishPubEvent, &FihishPubEvent{})
			if err := m.FihishPubEvent[len(m.FihishPubEvent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidPubEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidPubEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidPubEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidPubEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidPubEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidPubEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidPubEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidPubEvents == nil {
				m.ValidPubEvents = &ValidPubEvents{}
			}
			if err := m.ValidPubEvents.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidPubEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidPubEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidPubEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidPubEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidPubEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidPubEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidPubEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidPubEvents = append(m.ValidPubEvents, &ValidPubEvents{})
			if err := m.ValidPubEvents[len(m.ValidPubEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPartPubEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPartPubEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPartPubEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPartPubEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPartPubEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPartPubEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartPubEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PartPubEvents == nil {
				m.PartPubEvents = &PartPubEvents{}
			}
			if err := m.PartPubEvents.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPartPubEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPartPubEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPartPubEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPartPubEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPartPubEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPartPubEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartPubEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartPubEvents = append(m.PartPubEvents, &PartPubEvents{})
			if err := m.PartPubEvents[len(m.PartPubEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreatePubEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreatePubEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreatePubEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreatePubEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreatePubEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreatePubEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatePubEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatePubEvents == nil {
				m.CreatePubEvents = &CreatePubEvents{}
			}
			if err := m.CreatePubEvents.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCreatePubEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCreatePubEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCreatePubEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCreatePubEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCreatePubEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCreatePubEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatePubEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatePubEvents = append(m.CreatePubEvents, &CreatePubEvents{})
			if err := m.CreatePubEvents[len(m.CreatePubEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
