// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: publicevents/valid_pub_events.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidPubEvents struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id          uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PubId       uint64 `protobuf:"varint,3,opt,name=pubId,proto3" json:"pubId,omitempty"`
	Answers     string `protobuf:"bytes,4,opt,name=answers,proto3" json:"answers,omitempty"`
	Reput       int64  `protobuf:"varint,5,opt,name=reput,proto3" json:"reput,omitempty"`
	AnswerIndex uint32 `protobuf:"varint,6,opt,name=answerIndex,proto3" json:"answerIndex,omitempty"`
}

func (m *ValidPubEvents) Reset()         { *m = ValidPubEvents{} }
func (m *ValidPubEvents) String() string { return proto.CompactTextString(m) }
func (*ValidPubEvents) ProtoMessage()    {}
func (*ValidPubEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2f15ffd67c4b2fb, []int{0}
}
func (m *ValidPubEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidPubEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidPubEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidPubEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidPubEvents.Merge(m, src)
}
func (m *ValidPubEvents) XXX_Size() int {
	return m.Size()
}
func (m *ValidPubEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidPubEvents.DiscardUnknown(m)
}

var xxx_messageInfo_ValidPubEvents proto.InternalMessageInfo

func (m *ValidPubEvents) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ValidPubEvents) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ValidPubEvents) GetPubId() uint64 {
	if m != nil {
		return m.PubId
	}
	return 0
}

func (m *ValidPubEvents) GetAnswers() string {
	if m != nil {
		return m.Answers
	}
	return ""
}

func (m *ValidPubEvents) GetReput() int64 {
	if m != nil {
		return m.Reput
	}
	return 0
}

func (m *ValidPubEvents) GetAnswerIndex() uint32 {
	if m != nil {
		return m.AnswerIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*ValidPubEvents)(nil), "VoroshilovMax.bettery.publicevents.ValidPubEvents")
}

func init() {
	proto.RegisterFile("publicevents/valid_pub_events.proto", fileDescriptor_b2f15ffd67c4b2fb)
}

var fileDescriptor_b2f15ffd67c4b2fb = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x3d, 0x6a, 0xc3, 0x30,
	0x1c, 0xc5, 0x2d, 0xe7, 0xa3, 0x54, 0xa5, 0x19, 0x4c, 0x06, 0xd1, 0x41, 0x98, 0x74, 0xf1, 0x64,
	0x0d, 0xa5, 0x17, 0x28, 0x74, 0xc8, 0x50, 0x5a, 0x3c, 0x64, 0xe8, 0x12, 0x2c, 0x4b, 0x38, 0x02,
	0xd7, 0x12, 0xfa, 0x70, 0x9d, 0x5b, 0xf4, 0x0c, 0x3d, 0x4d, 0xc7, 0x8c, 0x1d, 0x8b, 0x7d, 0x91,
	0x62, 0x2b, 0x81, 0x64, 0xd3, 0x7b, 0xfc, 0x7e, 0x82, 0xff, 0x83, 0xf7, 0xca, 0xd1, 0x4a, 0x14,
	0xbc, 0xe1, 0xb5, 0x35, 0xa4, 0xc9, 0x2b, 0xc1, 0xb6, 0xca, 0xd1, 0xad, 0x2f, 0x52, 0xa5, 0xa5,
	0x95, 0xd1, 0x6a, 0x23, 0xb5, 0x34, 0x3b, 0x51, 0xc9, 0xe6, 0x25, 0x6f, 0x53, 0xca, 0xad, 0xe5,
	0x7a, 0x9f, 0x9e, 0xab, 0x77, 0xcb, 0x52, 0x96, 0x72, 0xc4, 0xc9, 0xf0, 0xf2, 0xe6, 0xea, 0x1b,
	0xc0, 0xc5, 0x66, 0xf8, 0xf4, 0xcd, 0xd1, 0xe7, 0x11, 0x8c, 0x10, 0xbc, 0x2a, 0x34, 0xcf, 0xad,
	0xd4, 0x08, 0xc4, 0x20, 0xb9, 0xce, 0x4e, 0x31, 0x5a, 0xc0, 0x50, 0x30, 0x14, 0xc6, 0x20, 0x99,
	0x66, 0xa1, 0x60, 0xd1, 0x12, 0xce, 0x94, 0xa3, 0x6b, 0x86, 0x26, 0x63, 0xe5, 0xc3, 0xe0, 0xe7,
	0xb5, 0xf9, 0xe4, 0xda, 0xa0, 0xa9, 0xf7, 0x8f, 0x71, 0xe0, 0x35, 0x57, 0xce, 0xa2, 0x59, 0x0c,
	0x92, 0x49, 0xe6, 0x43, 0x14, 0xc3, 0x1b, 0x0f, 0xac, 0x6b, 0xc6, 0x5b, 0x34, 0x8f, 0x41, 0x72,
	0x9b, 0x9d, 0x57, 0x4f, 0xaf, 0x3f, 0x1d, 0x06, 0x87, 0x0e, 0x83, 0xbf, 0x0e, 0x83, 0xaf, 0x1e,
	0x07, 0x87, 0x1e, 0x07, 0xbf, 0x3d, 0x0e, 0xde, 0x1f, 0x4b, 0x61, 0x77, 0x8e, 0xa6, 0x85, 0xfc,
	0x20, 0x17, 0x1b, 0x90, 0xe3, 0x06, 0xa4, 0x25, 0x17, 0x03, 0xda, 0xbd, 0xe2, 0x86, 0xce, 0xc7,
	0xe3, 0x1f, 0xfe, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x5a, 0xb7, 0xe2, 0x5d, 0x01, 0x00, 0x00,
}

func (m *ValidPubEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidPubEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidPubEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnswerIndex != 0 {
		i = encodeVarintValidPubEvents(dAtA, i, uint64(m.AnswerIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.Reput != 0 {
		i = encodeVarintValidPubEvents(dAtA, i, uint64(m.Reput))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Answers) > 0 {
		i -= len(m.Answers)
		copy(dAtA[i:], m.Answers)
		i = encodeVarintValidPubEvents(dAtA, i, uint64(len(m.Answers)))
		i--
		dAtA[i] = 0x22
	}
	if m.PubId != 0 {
		i = encodeVarintValidPubEvents(dAtA, i, uint64(m.PubId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintValidPubEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintValidPubEvents(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidPubEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidPubEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidPubEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovValidPubEvents(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovValidPubEvents(uint64(m.Id))
	}
	if m.PubId != 0 {
		n += 1 + sovValidPubEvents(uint64(m.PubId))
	}
	l = len(m.Answers)
	if l > 0 {
		n += 1 + l + sovValidPubEvents(uint64(l))
	}
	if m.Reput != 0 {
		n += 1 + sovValidPubEvents(uint64(m.Reput))
	}
	if m.AnswerIndex != 0 {
		n += 1 + sovValidPubEvents(uint64(m.AnswerIndex))
	}
	return n
}

func sovValidPubEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidPubEvents(x uint64) (n int) {
	return sovValidPubEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidPubEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidPubEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidPubEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidPubEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidPubEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidPubEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidPubEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidPubEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubId", wireType)
			}
			m.PubId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidPubEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PubId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidPubEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidPubEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidPubEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reput", wireType)
			}
			m.Reput = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidPubEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reput |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswerIndex", wireType)
			}
			m.AnswerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidPubEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnswerIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidPubEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidPubEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidPubEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidPubEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidPubEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidPubEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidPubEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidPubEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidPubEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidPubEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidPubEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidPubEvents = fmt.Errorf("proto: unexpected end of group")
)
