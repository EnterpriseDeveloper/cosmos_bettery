// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: publicevents/part_pub_events.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PartPubEvents struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id          uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PubId       uint64 `protobuf:"varint,3,opt,name=pubId,proto3" json:"pubId,omitempty"`
	Answers     string `protobuf:"bytes,4,opt,name=answers,proto3" json:"answers,omitempty"`
	Amount      string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	AnswerIndex uint32 `protobuf:"varint,6,opt,name=answerIndex,proto3" json:"answerIndex,omitempty"`
}

func (m *PartPubEvents) Reset()         { *m = PartPubEvents{} }
func (m *PartPubEvents) String() string { return proto.CompactTextString(m) }
func (*PartPubEvents) ProtoMessage()    {}
func (*PartPubEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_4860d65d15f88f4c, []int{0}
}
func (m *PartPubEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartPubEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartPubEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartPubEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartPubEvents.Merge(m, src)
}
func (m *PartPubEvents) XXX_Size() int {
	return m.Size()
}
func (m *PartPubEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_PartPubEvents.DiscardUnknown(m)
}

var xxx_messageInfo_PartPubEvents proto.InternalMessageInfo

func (m *PartPubEvents) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *PartPubEvents) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PartPubEvents) GetPubId() uint64 {
	if m != nil {
		return m.PubId
	}
	return 0
}

func (m *PartPubEvents) GetAnswers() string {
	if m != nil {
		return m.Answers
	}
	return ""
}

func (m *PartPubEvents) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *PartPubEvents) GetAnswerIndex() uint32 {
	if m != nil {
		return m.AnswerIndex
	}
	return 0
}

type AllPartPubEvent struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PrivId  uint64 `protobuf:"varint,2,opt,name=privId,proto3" json:"privId,omitempty"`
}

func (m *AllPartPubEvent) Reset()         { *m = AllPartPubEvent{} }
func (m *AllPartPubEvent) String() string { return proto.CompactTextString(m) }
func (*AllPartPubEvent) ProtoMessage()    {}
func (*AllPartPubEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_4860d65d15f88f4c, []int{1}
}
func (m *AllPartPubEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllPartPubEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllPartPubEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllPartPubEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPartPubEvent.Merge(m, src)
}
func (m *AllPartPubEvent) XXX_Size() int {
	return m.Size()
}
func (m *AllPartPubEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPartPubEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AllPartPubEvent proto.InternalMessageInfo

func (m *AllPartPubEvent) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *AllPartPubEvent) GetPrivId() uint64 {
	if m != nil {
		return m.PrivId
	}
	return 0
}

func init() {
	proto.RegisterType((*PartPubEvents)(nil), "VoroshilovMax.bettery.publicevents.PartPubEvents")
	proto.RegisterType((*AllPartPubEvent)(nil), "VoroshilovMax.bettery.publicevents.allPartPubEvent")
}

func init() {
	proto.RegisterFile("publicevents/part_pub_events.proto", fileDescriptor_4860d65d15f88f4c)
}

var fileDescriptor_4860d65d15f88f4c = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x31, 0x6a, 0xc3, 0x30,
	0x18, 0x85, 0xa3, 0x34, 0x71, 0xa9, 0x4a, 0x5a, 0x10, 0x21, 0x88, 0x0e, 0xc2, 0x78, 0xca, 0x64,
	0x0d, 0xa5, 0x17, 0x68, 0xe9, 0x90, 0xa1, 0x34, 0x78, 0xe8, 0xd0, 0x25, 0x48, 0xb6, 0x70, 0x04,
	0x8e, 0x25, 0x64, 0xc9, 0x75, 0x6e, 0xd1, 0x3b, 0xf4, 0x32, 0x1d, 0x33, 0x76, 0x2c, 0xf6, 0x45,
	0x4a, 0x6c, 0x07, 0x9c, 0xa5, 0x9b, 0xbe, 0xa7, 0xf7, 0xe0, 0xf1, 0x7e, 0x18, 0x68, 0xc7, 0x33,
	0x19, 0x8b, 0x52, 0xe4, 0xb6, 0xa0, 0x9a, 0x19, 0xbb, 0xd1, 0x8e, 0x6f, 0x3a, 0x0e, 0xb5, 0x51,
	0x56, 0xa1, 0xe0, 0x4d, 0x19, 0x55, 0x6c, 0x65, 0xa6, 0xca, 0x17, 0x56, 0x85, 0x5c, 0x58, 0x2b,
	0xcc, 0x3e, 0x1c, 0x26, 0xef, 0xe6, 0xa9, 0x4a, 0x55, 0x6b, 0xa7, 0xc7, 0x57, 0x97, 0x0c, 0xbe,
	0x00, 0x9c, 0xad, 0x99, 0xb1, 0x6b, 0xc7, 0x9f, 0x5b, 0x1f, 0xc2, 0xf0, 0x32, 0x36, 0x82, 0x59,
	0x65, 0x30, 0xf0, 0xc1, 0xf2, 0x2a, 0x3a, 0x21, 0xba, 0x81, 0x63, 0x99, 0xe0, 0xb1, 0x0f, 0x96,
	0x93, 0x68, 0x2c, 0x13, 0x34, 0x87, 0x53, 0xed, 0xf8, 0x2a, 0xc1, 0x17, 0xad, 0xd4, 0xc1, 0x31,
	0xcf, 0xf2, 0xe2, 0x43, 0x98, 0x02, 0x4f, 0xba, 0x7c, 0x8f, 0x68, 0x01, 0x3d, 0xb6, 0x53, 0x2e,
	0xb7, 0x78, 0xda, 0x7e, 0xf4, 0x84, 0x7c, 0x78, 0xdd, 0x59, 0x56, 0x79, 0x22, 0x2a, 0xec, 0xf9,
	0x60, 0x39, 0x8b, 0x86, 0x52, 0xf0, 0x04, 0x6f, 0x59, 0x96, 0x0d, 0x7b, 0xfe, 0x53, 0x73, 0x01,
	0x3d, 0x6d, 0x64, 0xb9, 0x3a, 0x55, 0xed, 0xe9, 0xf1, 0xf5, 0xbb, 0x26, 0xe0, 0x50, 0x13, 0xf0,
	0x5b, 0x13, 0xf0, 0xd9, 0x90, 0xd1, 0xa1, 0x21, 0xa3, 0x9f, 0x86, 0x8c, 0xde, 0x1f, 0x52, 0x69,
	0xb7, 0x8e, 0x87, 0xb1, 0xda, 0xd1, 0xb3, 0x25, 0x69, 0xbf, 0x24, 0xad, 0xe8, 0xd9, 0x15, 0xec,
	0x5e, 0x8b, 0x82, 0x7b, 0xed, 0x84, 0xf7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x2b, 0xce,
	0xa5, 0xa2, 0x01, 0x00, 0x00,
}

func (m *PartPubEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartPubEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartPubEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnswerIndex != 0 {
		i = encodeVarintPartPubEvents(dAtA, i, uint64(m.AnswerIndex))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintPartPubEvents(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Answers) > 0 {
		i -= len(m.Answers)
		copy(dAtA[i:], m.Answers)
		i = encodeVarintPartPubEvents(dAtA, i, uint64(len(m.Answers)))
		i--
		dAtA[i] = 0x22
	}
	if m.PubId != 0 {
		i = encodeVarintPartPubEvents(dAtA, i, uint64(m.PubId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintPartPubEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPartPubEvents(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllPartPubEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllPartPubEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllPartPubEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrivId != 0 {
		i = encodeVarintPartPubEvents(dAtA, i, uint64(m.PrivId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPartPubEvents(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPartPubEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovPartPubEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PartPubEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPartPubEvents(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovPartPubEvents(uint64(m.Id))
	}
	if m.PubId != 0 {
		n += 1 + sovPartPubEvents(uint64(m.PubId))
	}
	l = len(m.Answers)
	if l > 0 {
		n += 1 + l + sovPartPubEvents(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovPartPubEvents(uint64(l))
	}
	if m.AnswerIndex != 0 {
		n += 1 + sovPartPubEvents(uint64(m.AnswerIndex))
	}
	return n
}

func (m *AllPartPubEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPartPubEvents(uint64(l))
	}
	if m.PrivId != 0 {
		n += 1 + sovPartPubEvents(uint64(m.PrivId))
	}
	return n
}

func sovPartPubEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPartPubEvents(x uint64) (n int) {
	return sovPartPubEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PartPubEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPartPubEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartPubEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartPubEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartPubEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPartPubEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPartPubEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartPubEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubId", wireType)
			}
			m.PubId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartPubEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PubId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartPubEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPartPubEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPartPubEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartPubEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPartPubEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPartPubEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswerIndex", wireType)
			}
			m.AnswerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartPubEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnswerIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPartPubEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPartPubEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllPartPubEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPartPubEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: allPartPubEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: allPartPubEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartPubEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPartPubEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPartPubEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivId", wireType)
			}
			m.PrivId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartPubEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPartPubEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPartPubEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPartPubEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPartPubEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPartPubEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPartPubEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPartPubEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPartPubEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPartPubEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPartPubEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPartPubEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPartPubEvents = fmt.Errorf("proto: unexpected end of group")
)
